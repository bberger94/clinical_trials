in.data %>%
#slice(sample_index) %>%
rename(trial_id = id) %>%
arrange(trial_id)
indications_long <-
trials %>%
my_expand(trial_id, Indications) %>%
rename(indication_id = `@id`, indication_name = `$`
) %>%
mutate(indication_name = tolower(indication_name))
icd9_long <-
indications_long %>%
left_join(icd9_xwalk, by = c('indication_name' = 'cortellis_condition'))
save.image(file = 'data/long_data.RData')
###############################################################################
## 02_reshape_and_merge.R ; Author: Ben Berger;                              ##
##                                                                           ##
## Takes parsed data in the long format produced by "01_parse_json.R",       ##
## and reshapes them in the wide format with each row representing a unique  ##
## trial                                                                     ##
###############################################################################
library(dplyr)
library(tidyr)
library(haven)
library(readr)
#To reshape trial data long to wide
my_reshape <- function(df) {
df %>%
group_by(trial_id) %>%
mutate(i = 1:n()) %>%
mutate(i = as.character(sprintf("%03d", i))) %>%
ungroup %>%
select(trial_id, everything()) %>%
gather(key, value, -c(i, trial_id)) %>%
unite(key_i, c(key, i)) %>%
spread(key_i, value)
}
data_wide <-
trials %>%
select(trial_id,
date_start = DateStart,
patient_count_enrollment = PatientCountEnrollment,
phase = Phase)
#Reshape intermediary dataframes wide and right join by trial_id
for(longdata in ls(pattern = '*_long')){
longdata <- get(longdata)
data_wide <- longdata %>% my_reshape %>% right_join(data_wide)
}
names(icd9_long)
icd9_long <-
indications_long %>%
left_join(icd9_xwalk, by = c('indication_name' = 'cortellis_condition')) %>%
select(trial_id, starts_with('icd9'), malignant_not_specified)
rm(data_wide)
save.image(file = 'data/long_data.RData')
###############################################################################
## 02_reshape_and_merge.R ; Author: Ben Berger;                              ##
##                                                                           ##
## Takes parsed data in the long format produced by "01_parse_json.R",       ##
## and reshapes them in the wide format with each row representing a unique  ##
## trial                                                                     ##
###############################################################################
library(dplyr)
library(tidyr)
library(haven)
library(readr)
#To reshape trial data long to wide
my_reshape <- function(df) {
df %>%
group_by(trial_id) %>%
mutate(i = 1:n()) %>%
mutate(i = as.character(sprintf("%03d", i))) %>%
ungroup %>%
select(trial_id, everything()) %>%
gather(key, value, -c(i, trial_id)) %>%
unite(key_i, c(key, i)) %>%
spread(key_i, value)
}
#Load data from 01_parse_json
#load('data/long_data.RData')
#Initialize a tibble with only non-json columns
data_wide <-
trials %>%
select(trial_id,
date_start = DateStart,
patient_count_enrollment = PatientCountEnrollment,
phase = Phase)
#Reshape intermediary dataframes wide and right join by trial_id
for(longdata in ls(pattern = '*_long')){
longdata <- get(longdata)
data_wide <- longdata %>% my_reshape %>% right_join(data_wide)
}
#Make phase indicators; indicator of biomarker presence
data_wide <-
data_wide %>%
mutate(phase_1 = grepl('Phase 1', phase),
phase_2 = grepl('Phase 2', phase),
phase_3 = grepl('Phase 3', phase),
phase_4 = grepl('Phase 4', phase),
biomarker_status = !is.na(biomarker_id_001)
)
#Replace phase_N columns with NA if phase is not specified
#'Phase Not Applicable' returns phase_N = 0 for all trial phases N
data_wide[data_wide$phase == 'Phase not specified',grep('phase_', colnames(data_wide))] <- NA
#Replace trial biomarker role indicators with false if no biomarker was used
f <- function(x){
x[is.na(x)] <- FALSE
x
}
data_wide <-
data_wide %>%
mutate_at(vars(ends_with('_marker_001')), f)
table(data_wide$disease_marker_001)
#Same for nih funding
data_wide$nih_yes_001[is.na(data_wide$nih_yes_001)] <- FALSE
table(data_wide$nih_yes_001)
#Make the data pretty(ish)!
data <-
data_wide %>%
select(
trial_id,
date_start = date_start,
date_end = date_end_001,
date_end_type = date_end_type_001,
starts_with('phase'),
biomarker_status,
us_trial = us_trial_001,
nih_funding = nih_yes_001,
patient_count_enrollment,
recruitment_status = recruitment_status_001,
disease_marker_role = disease_marker_001,
toxic_marker_role = toxic_marker_001,
therapeutic_marker_role = therapeutic_marker_001,
not_determined_marker_role = not_determined_marker_001,
starts_with('indication'),
starts_with('sponsor_company'),
starts_with('collaborator_company'),
starts_with('biomarker_id'),
starts_with('biomarker_name'),
starts_with('biomarker_role'),
starts_with('trial_endpoint'),
starts_with('trial_design'),
everything()
) %>%
mutate(date_start = as.Date(date_start),
date_end = as.Date(date_end)) %>%
mutate_if(is.logical, as.numeric) %>%
arrange(trial_id)
View(identifiers_long)
rm(data_wide)
biomarkers_long <-
trials %>%
my_expand(trial_id, BiomarkerNames) %>%
rename(biomarker_id = `@id`,
biomarker_role = `@type`,
biomarker_name = `$`
) %>%
mutate(disease_marker = grepl('disease', tolower(biomarker_role)),
toxic_marker = grepl('toxic', tolower(biomarker_role)),
therapeutic_marker = grepl('therapeutic', tolower(biomarker_role)),
not_determined_marker = grepl('not determined', tolower(biomarker_role)),
not_determined_marker = not_determined_marker | (!disease_marker & !toxic_marker & !therapeutic_marker)
)
trial_biomarkers_long <-
biomarkers_long %>%
group_by(trial_id) %>%
summarize(disease_marker = any(disease_marker),
toxic_marker = any(toxic_marker),
therapeutic_marker = any(therapeutic_marker),
not_determined_marker = any(not_determined_marker)
)
biomarkers_long <-
biomarkers_long %>%
select(-ends_with('_marker'))
trials %>%
#slice(166378) %>%
my_expand(trial_id, SitesByCountries) %>%
mutate(us_trial = (country == 'US'))
set.seed(101)
sample_index <- sample(nrow(in.data), 1000)
trials <-
in.data %>%
slice(sample_index) %>%
rename(trial_id = id) %>%
arrange(trial_id)
trials %>%
#slice(166378) %>%
my_expand(trial_id, SitesByCountries) %>%
mutate(us_trial = (country == 'US'))
set.seed(101)
sample_index <- sample(nrow(in.data), 1000)
trials <-
in.data %>%
#slice(sample_index) %>%
rename(trial_id = id) %>%
arrange(trial_id)
rm(list = ls(pattern = "*_long"))
## Subset to test functions
set.seed(101)
sample_index <- sample(nrow(in.data), 1000)
trials <-
in.data %>%
#slice(sample_index) %>%
rename(trial_id = id) %>%
arrange(trial_id)
## Parse json columns as tibbles (data_frames)
#Companies
collaborators_long <-
trials %>%
my_expand(trial_id, CompaniesCollaborator) %>%
rename(collaborator_company_id = `@id`, collaborator_company_name = `$`
)
load('data/long_data.RData')
indications_long <-
trials %>%
my_expand(trial_id, Indications) %>%
rename(indication_id = `@id`, indication_name = `$`
) %>%
mutate(indication_name = tolower(indication_name))
icd9_long <-
indications_long %>%
left_join(icd9_xwalk, by = c('indication_name' = 'cortellis_condition')) %>%
select(trial_id, starts_with('icd9'), malignant_not_specified)
#Biomarkers
biomarkers_long <-
trials %>%
my_expand(trial_id, BiomarkerNames) %>%
rename(biomarker_id = `@id`,
biomarker_role = `@type`,
biomarker_name = `$`
) %>%
mutate(disease_marker = grepl('disease', tolower(biomarker_role)),
toxic_marker = grepl('toxic', tolower(biomarker_role)),
therapeutic_marker = grepl('therapeutic', tolower(biomarker_role)),
not_determined_marker = grepl('not determined', tolower(biomarker_role)),
not_determined_marker = not_determined_marker | (!disease_marker & !toxic_marker & !therapeutic_marker)
)
trial_biomarkers_long <-
biomarkers_long %>%
group_by(trial_id) %>%
summarize(disease_marker = any(disease_marker),
toxic_marker = any(toxic_marker),
therapeutic_marker = any(therapeutic_marker),
not_determined_marker = any(not_determined_marker)
)
biomarkers_long <-
biomarkers_long %>%
select(-ends_with('_marker'))
#Trial Identifiers and NIH funding
identifiers_long <-
trials %>%
my_expand(trial_id, Identifiers) %>%
rename(trial_identifier_type = `@type`,
trial_identifier = `$`
)
nih_long <-
identifiers_long %>%
mutate(trial_id_first3 = substring(trimws(trial_identifier), 1, 3)) %>%
mutate(nih_funding = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_funding) %>%
group_by(trial_id) %>%
summarize(nih_funding = any(nih_funding)
)
mean(nih_long$nih_funding)
nih_long
save.image(file = 'data/long_data.RData')
###############################################################################
## 02_reshape_and_merge.R ; Author: Ben Berger;                              ##
##                                                                           ##
## Takes parsed data in the long format produced by "01_parse_json.R",       ##
## and reshapes them in the wide format with each row representing a unique  ##
## trial                                                                     ##
###############################################################################
library(dplyr)
library(tidyr)
library(haven)
library(readr)
#To reshape trial data long to wide
my_reshape <- function(df) {
df %>%
group_by(trial_id) %>%
mutate(i = 1:n()) %>%
mutate(i = as.character(sprintf("%03d", i))) %>%
ungroup %>%
select(trial_id, everything()) %>%
gather(key, value, -c(i, trial_id)) %>%
unite(key_i, c(key, i)) %>%
spread(key_i, value)
}
#Load data from 01_parse_json
#load('data/long_data.RData')
#Initialize a tibble with only non-json columns
data_wide <-
trials %>%
select(trial_id,
date_start = DateStart,
patient_count_enrollment = PatientCountEnrollment,
phase = Phase)
#Reshape intermediary dataframes wide and right join by trial_id
for(longdata in ls(pattern = '*_long')){
longdata <- get(longdata)
data_wide <- longdata %>% my_reshape %>% right_join(data_wide)
}
#Make phase indicators; indicator of biomarker presence
data_wide <-
data_wide %>%
mutate(phase_1 = grepl('Phase 1', phase),
phase_2 = grepl('Phase 2', phase),
phase_3 = grepl('Phase 3', phase),
phase_4 = grepl('Phase 4', phase),
biomarker_status = !is.na(biomarker_id_001)
)
#Replace phase_N columns with NA if phase is not specified
#'Phase Not Applicable' returns phase_N = 0 for all trial phases N
data_wide[data_wide$phase == 'Phase not specified',grep('phase_', colnames(data_wide))] <- NA
#Replace trial biomarker role indicators with false if no biomarker was used
f <- function(x){
x[is.na(x)] <- FALSE
x
}
data_wide <-
data_wide %>%
mutate_at(vars(ends_with('_marker_001')), f)
table(data_wide$disease_marker_001)
#Same for nih funding
data_wide$nih_yes_001[is.na(data_wide$nih_yes_001)] <- FALSE
table(data_wide$nih_yes_001)
#Make the data pretty(ish)!
data <-
data_wide %>%
select(
trial_id,
date_start = date_start,
date_end = date_end_001,
date_end_type = date_end_type_001,
starts_with('phase'),
biomarker_status,
us_trial = us_trial_001,
nih_funding = nih_yes_001,
patient_count_enrollment,
recruitment_status = recruitment_status_001,
disease_marker_role = disease_marker_001,
toxic_marker_role = toxic_marker_001,
therapeutic_marker_role = therapeutic_marker_001,
not_determined_marker_role = not_determined_marker_001,
starts_with('indication'),
icd9, starts_with('icd9_'), malignant_not_specified,
starts_with('sponsor_company'), starts_with('collaborator_company'),
starts_with('biomarker_id'), starts_with('biomarker_name'), starts_with('biomarker_role'),
starts_with('trial_endpoint'), starts_with('trial_design'),
everything()
) %>%
mutate(date_start = as.Date(date_start),
date_end = as.Date(date_end)) %>%
mutate_if(is.logical, as.numeric) %>%
arrange(trial_id)
data <-
data_wide %>%
select(
trial_id,
date_start = date_start,
date_end = date_end_001,
date_end_type = date_end_type_001,
starts_with('phase'),
biomarker_status,
us_trial = us_trial_001,
nih_funding = nih_funding_001,
patient_count_enrollment,
recruitment_status = recruitment_status_001,
disease_marker_role = disease_marker_001,
toxic_marker_role = toxic_marker_001,
therapeutic_marker_role = therapeutic_marker_001,
not_determined_marker_role = not_determined_marker_001,
starts_with('indication'),
icd9, starts_with('icd9_'), malignant_not_specified,
starts_with('sponsor_company'), starts_with('collaborator_company'),
starts_with('biomarker_id'), starts_with('biomarker_name'), starts_with('biomarker_role'),
starts_with('trial_endpoint'), starts_with('trial_design'),
everything()
) %>%
mutate(date_start = as.Date(date_start),
date_end = as.Date(date_end)) %>%
mutate_if(is.logical, as.numeric) %>%
arrange(trial_id)
data <-
data_wide %>%
select(
trial_id,
date_start = date_start,
date_end = date_end_001,
date_end_type = date_end_type_001,
starts_with('phase'),
biomarker_status,
us_trial = us_trial_001,
nih_funding = nih_funding_001,
patient_count_enrollment,
recruitment_status = recruitment_status_001,
disease_marker_role = disease_marker_001,
toxic_marker_role = toxic_marker_001,
therapeutic_marker_role = therapeutic_marker_001,
not_determined_marker_role = not_determined_marker_001,
starts_with('indication'),
starts_with('icd9'), malignant_not_specified,
starts_with('sponsor_company'), starts_with('collaborator_company'),
starts_with('biomarker_id'), starts_with('biomarker_name'), starts_with('biomarker_role'),
starts_with('trial_endpoint'), starts_with('trial_design'),
everything()
) %>%
mutate(date_start = as.Date(date_start),
date_end = as.Date(date_end)) %>%
mutate_if(is.logical, as.numeric) %>%
arrange(trial_id)
table(data_wide$disease_marker_001)
table(data_wide$disease_marker_001)
data_wide$nih_funding_001[is.na(data_wide$nih_funding_001)] <- FALSE
table(data_wide$nih_fundings_001)
data <-
data_wide %>%
select(
trial_id,
date_start = date_start,
date_end = date_end_001,
date_end_type = date_end_type_001,
starts_with('phase'),
biomarker_status,
us_trial = us_trial_001,
nih_funding = nih_funding_001,
patient_count_enrollment,
recruitment_status = recruitment_status_001,
disease_marker_role = disease_marker_001,
toxic_marker_role = toxic_marker_001,
therapeutic_marker_role = therapeutic_marker_001,
not_determined_marker_role = not_determined_marker_001,
starts_with('indication'),
starts_with('icd9'), malignant_not_specified,
starts_with('sponsor_company'), starts_with('collaborator_company'),
starts_with('biomarker_id'), starts_with('biomarker_name'), starts_with('biomarker_role'),
starts_with('trial_endpoint'), starts_with('trial_design'),
everything()
) %>%
mutate(date_start = as.Date(date_start),
date_end = as.Date(date_end)) %>%
mutate_if(is.logical, as.numeric) %>%
arrange(trial_id)
data <-
data_wide %>%
select(
trial_id,
date_start = date_start,
date_end = date_end_001,
date_end_type = date_end_type_001,
starts_with('phase'),
biomarker_status,
us_trial = us_trial_001,
nih_funding = nih_funding_001,
patient_count_enrollment,
recruitment_status = recruitment_status_001,
disease_marker_role = disease_marker_001,
toxic_marker_role = toxic_marker_001,
therapeutic_marker_role = therapeutic_marker_001,
not_determined_marker_role = not_determined_marker_001,
starts_with('indication'),
starts_with('icd9'),
malignant_not_specified = malignant_not_specified_001,
starts_with('sponsor_company'), starts_with('collaborator_company'),
starts_with('biomarker_id'), starts_with('biomarker_name'), starts_with('biomarker_role'),
starts_with('trial_endpoint'), starts_with('trial_design'),
everything()
) %>%
mutate(date_start = as.Date(date_start),
date_end = as.Date(date_end)) %>%
mutate_if(is.logical, as.numeric) %>%
arrange(trial_id)
data %>% slice(1:100) %>% View
data %>% slice(1:100) %>% filter(trial_id, starts_with('icd9')) %>% View
data %>% slice(1:100) %>% select(trial_id, starts_with('icd9')) %>% View
data %>% slice(1:100) %>% select(trial_id, indication_001, starts_with('icd9')) %>% View
data %>% slice(1:100) %>% select(trial_id, indication_name_001, starts_with('icd9')) %>% View
data %>% slice(1:100) %>% select(trial_id, indication_name_001, indication_name_002, starts_with('icd9')) %>% View
names(data)[-(1:1000)]
data <-
data_wide %>%
select(
trial_id,
date_start = date_start,
date_end = date_end_001,
date_end_type = date_end_type_001,
starts_with('phase'),
biomarker_status,
us_trial = us_trial_001,
nih_funding = nih_funding_001,
patient_count_enrollment,
recruitment_status = recruitment_status_001,
disease_marker_role = disease_marker_001,
toxic_marker_role = toxic_marker_001,
therapeutic_marker_role = therapeutic_marker_001,
not_determined_marker_role = not_determined_marker_001,
starts_with('indication'),
starts_with('icd9'),
starts_with('sponsor_company'), starts_with('collaborator_company'),
starts_with('biomarker_id'), starts_with('biomarker_name'), starts_with('biomarker_role'),
starts_with('trial_endpoint'), starts_with('trial_design'),
malignant_not_specified_001,
everything()
) %>%
mutate(date_start = as.Date(date_start),
date_end = as.Date(date_end)) %>%
mutate_if(is.logical, as.numeric) %>%
arrange(trial_id)
data %>% slice(1:100) %>% select(trial_id, indication_name_001, indication_name_002, starts_with('malignant_not_specified')) %>% View
?ssh
?scp
