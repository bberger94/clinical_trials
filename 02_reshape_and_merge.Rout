
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###############################################################################
> ## 02_reshape_and_merge.R ; Author: Ben Berger;                              ##
> ##                                                                           ##
> ## Takes parsed data in the long format produced by "01_parse_json.R",       ##
> ## and reshapes them in the wide format with each row representing a unique  ##
> ## trial                                                                     ##
> ###############################################################################
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr)
> library(haven)
> library(readr)
> 
> 
> #To reshape trial data long to wide
> my_reshape <- function(df) {
+   df %>% 
+     group_by(trial_id) %>% 
+     mutate(i = 1:n()) %>% 
+     mutate(i = as.character(sprintf("%03d", i))) %>% 
+     ungroup %>% 
+     select(trial_id, everything()) %>% 
+     gather(key, value, -c(i, trial_id)) %>% 
+     unite(key_i, c(key, i)) %>% 
+     spread(key_i, value)
+ }
> 
> #Load data from 01_parse_json
> load('data/long_data.RData')
> 
> #Initialize a tibble with only non-json columns
> data_wide <-
+   trials %>%
+   select(trial_id,
+          date_start = DateStart,
+          patient_count_enrollment = PatientCountEnrollment,
+          phase = Phase) 
> 
> #Reshape intermediary dataframes wide and right join by trial_id
> for(longdata in ls(pattern = '*_long')){
+   longdata <- get(longdata) 
+   data_wide <- longdata %>% my_reshape %>% right_join(data_wide)
+ }
Joining, by = "trial_id"
Joining, by = "trial_id"
Joining, by = "trial_id"
Joining, by = "trial_id"
Joining, by = "trial_id"
Joining, by = "trial_id"
Joining, by = "trial_id"
Joining, by = "trial_id"
Joining, by = "trial_id"
Joining, by = "trial_id"
Joining, by = "trial_id"
Joining, by = "trial_id"
Joining, by = "trial_id"
> 
> #Make phase indicators; indicator of biomarker presence
> data_wide <- 
+   data_wide %>%
+   mutate(phase_1 = grepl('Phase 1', phase),
+          phase_2 = grepl('Phase 2', phase),
+          phase_3 = grepl('Phase 3', phase),
+          phase_4 = grepl('Phase 4', phase),
+          biomarker_status = !is.na(biomarker_id_001)
+          ) 
> 
> #Replace phase_N columns with NA if phase is not specified 
> #'Phase Not Applicable' returns phase_N = 0 for all trial phases N
> data_wide[data_wide$phase == 'Phase not specified',grep('phase_', colnames(data_wide))] <- NA
> 
> #Replace trial biomarker role indicators with false if no biomarker was used
> f <- function(x){
+   x[is.na(x)] <- FALSE
+   x
+ }
> data_wide <-
+   data_wide %>%
+   mutate_at(vars(ends_with('_marker_001')), f)
> 
> table(data_wide$disease_marker_001)

 FALSE   TRUE 
247010  27537 
> 
> #Same for nih funding
> data_wide$nih_funding_001[is.na(data_wide$nih_funding_001)] <- FALSE
> table(data_wide$nih_funding_001)

 FALSE   TRUE 
268837   5710 
> 
> #Make the data pretty(ish)!
> data <- 
+   data_wide %>% 
+   select(
+     trial_id, 
+     date_start = date_start,
+     date_end = date_end_001,
+     date_end_type = date_end_type_001,
+     starts_with('phase'),
+     biomarker_status, 
+     us_trial = us_trial_001,
+     nih_funding = nih_funding_001,
+     patient_count_enrollment,
+     recruitment_status = recruitment_status_001,
+     disease_marker_role = disease_marker_001,
+     toxic_marker_role = toxic_marker_001,
+     therapeutic_marker_role = therapeutic_marker_001,
+     not_determined_marker_role = not_determined_marker_001,
+     starts_with('indication'),
+     starts_with('icd9'), 
+     starts_with('sponsor_company'), starts_with('collaborator_company'),
+     starts_with('biomarker_id'), starts_with('biomarker_name'), starts_with('biomarker_role'),
+     starts_with('trial_endpoint'), starts_with('trial_design'),
+     starts_with('malignant_not_specified'),
+     everything()
+   ) %>%
+   mutate(date_start = as.Date(date_start),
+          date_end = as.Date(date_end)) %>% 
+   mutate_if(is.logical, as.numeric) %>% 
+   arrange(trial_id)
> 
> save(file = 'data/clinical_trials_07-29-17.RData', data) 
> write_csv(data, 'data/clinical_trials_07-29-17.csv') 
> write_dta(data, 'data/clinical_trials_07-29-17.dta', version = 12) 
> 
> 
> 
> proc.time()
   user  system elapsed 
701.113  27.729 789.918 
