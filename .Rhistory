ungroup %>% select(nih_yes) %>% table
identifiers_long %>%
mutate(trial_id_first3 = substring(trial_identifier, 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes)
identifiers_long %>%
mutate(trial_id_first3 = substring(trial_identifier, 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id)
identifiers_long %>%
mutate(trial_id_first3 = substring(trial_identifier, 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
mutate(nih_yes = any(nih_yes))
identifiers_long %>%
mutate(trial_id_first3 = substring(trial_identifier, 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
mutate(nih_yes = any(nih_yes)) %>%
filter(nih_yes == 1)
identifiers_long %>%
mutate(trial_id_first3 = substring(trial_identifier, 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes))
identifiers_long %>%
mutate(trial_id_first3 = substring(trial_identifier, 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes)) %>%
filter(nih_yes == 1)
identifiers_long %>%
mutate(trial_id_first3 = substring(trial_identifier, 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes)) %>%
filter(nih_yes == 1)
ungroup %>% select(nih_yes) %>% table
identifiers_long %>%
mutate(trial_id_first3 = substring(trial_identifier, 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes)) %>%
ungroup %>% select(nih_yes) %>% table
identifiers_long %>%
mutate(trial_id_first3 = substring(trial_identifier, 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes)) %>%
ungroup %>% select(nih_yes) %>% table
identifiers_long %>%
mutate(trial_id_first3 = substring(trial_identifier, 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes))
identifiers_long
identifiers_long %>%
mutate(trial_id_first3 = substring(trial_identifier, 1, 3))
identifiers_long %>%
mutate(trial_id_first3 = substring(trimws(trial_identifier), 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes))
identifiers_long %>%
mutate(trial_id_first3 = substring(trimws(trial_identifier), 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code))
identifiers_long %>%
mutate(trial_id_first3 = substring(trimws(trial_identifier), 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes))
identifiers_long %>%
mutate(trial_id_first3 = substring(trimws(trial_identifier), 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes)
)
24/814
set.seed(101)
sample_index <- sample(nrow(in.data), 10000)
trials <-
in.data %>%
slice(sample_index) %>%
rename(trial_id = id) %>%
arrange(trial_id)
identifiers_long <-
trials %>%
my_expand(trial_id, Identifiers) %>%
rename(trial_identifier_type = `@type`,
trial_identifier = `$`
)
nih_long <-
identifiers_long %>%
mutate(trial_id_first3 = substring(trimws(trial_identifier), 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes)
)
identifiers_long %>%
mutate(trial_id_first3 = substring(trimws(trial_identifier), 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes)
)
nih_long$nih_yes %>% table
189/8162
#########################################################################
## parse_json.R ; Author: Ben Berger;                                  ##
## Modified from script by Andrew Marder:                              ##
## Original notes from AM:                                             ##
## I've written a function called `my_expand` to make working with the ##
## trials data a little bit easier. The `get_name`, `assert`, and      ##
## `json_to_dataframe` functions are helper functions that I used to   ##
## write the `my_expand` function.                                     ##
#########################################################################
library(dplyr)
library(rlang)
library(readr)
## Andrew: I prefer to assert conditions instead of stopping if not a condition.
assert <- stopifnot
get_name <- function(x) as.character(UQE(x))
## Apply json_to_dataframe to each cell of a column
my_expand <- function(df, id, var) {
id <- enquo(id)
var <- enquo(var)
varname <- deparse(substitute(var))
f <- function(row) {
assert(class(row) == "list")
if(varname == '~SitesByCountries') data <- json_to_dataframe_geodata(row[[get_name(var)]])
else data <- json_to_dataframe(row[[get_name(var)]], varname)
data[[get_name(id)]] <- row[[get_name(id)]]
return(data)
}
df %>%
select(!!id, !!var) %>%
filter(!is.na(!!var)) %>%
rowwise() %>%
do(f(.)) %>%
ungroup
}
## Parse a JSON cell as a tibble (data_frame)
json_to_dataframe <- function(s, varname) {
l <- jsonlite::fromJSON(s)
assert(class(l) == "list")
if(length(l) == 1) data <- l[[1]]
else data <- l
if (class(data) == "data.frame") {
return(data)
}
else {
data2 <- data.frame(data)
if(length(names(data)) == 0) names(data2) <- varname
else names(data2) <- names(data)
# next few lines are some test code for getting country data
# if(varname == '~SitesByCountries'){
#    data2$site_subdivision_code <- data2[['Sites.Site.CountrySubDivision']][['@code']]
#    data2$site_subdivision_name <- data2[['Sites.Site.CountrySubDivision']][['$']]
#    data2[['Sites.Site.CountrySubDivision']] <- NULL
# }
return(data2)
}
}
#Parse Geographic Data Column: Extract limited information
json_to_dataframe_geodata <- function(s) {
l <- jsonlite::fromJSON(s)
assert(class(l) == "list")
if(length(l) == 1) data <- l[[1]]
else data <- l
if(is.null(data[['@country']])) data[['@country']] <- NA
data <- data[['@country']] %>% as.data.frame
names(data) <- 'country'
return(data)
}
#########################################
## Call functions to parse JSON below  ##
#########################################
## Read in data
options(stringsAsFactors = FALSE)
#in.data <- read_csv('/Users/BBerger/Dropbox/Files_ClinTrials_Data/trials.csv')
in.data <- read_csv('../Files_ClinTrials_Data/trials.csv')
getwd()
save.image(file = 'data/long_data.RData')
#########################################################################
## parse_json.R ; Author: Ben Berger;                                  ##
## Modified from script by Andrew Marder:                              ##
## Original notes from AM:                                             ##
## I've written a function called `my_expand` to make working with the ##
## trials data a little bit easier. The `get_name`, `assert`, and      ##
## `json_to_dataframe` functions are helper functions that I used to   ##
## write the `my_expand` function.                                     ##
#########################################################################
library(dplyr)
library(rlang)
library(readr)
## Andrew: I prefer to assert conditions instead of stopping if not a condition.
assert <- stopifnot
get_name <- function(x) as.character(UQE(x))
## Apply json_to_dataframe to each cell of a column
my_expand <- function(df, id, var) {
id <- enquo(id)
var <- enquo(var)
varname <- deparse(substitute(var))
f <- function(row) {
assert(class(row) == "list")
if(varname == '~SitesByCountries') data <- json_to_dataframe_geodata(row[[get_name(var)]])
else data <- json_to_dataframe(row[[get_name(var)]], varname)
data[[get_name(id)]] <- row[[get_name(id)]]
return(data)
}
df %>%
select(!!id, !!var) %>%
filter(!is.na(!!var)) %>%
rowwise() %>%
do(f(.)) %>%
ungroup
}
## Parse a JSON cell as a tibble (data_frame)
json_to_dataframe <- function(s, varname) {
l <- jsonlite::fromJSON(s)
assert(class(l) == "list")
if(length(l) == 1) data <- l[[1]]
else data <- l
if (class(data) == "data.frame") {
return(data)
}
else {
data2 <- data.frame(data)
if(length(names(data)) == 0) names(data2) <- varname
else names(data2) <- names(data)
# next few lines are some test code for getting country data
# if(varname == '~SitesByCountries'){
#    data2$site_subdivision_code <- data2[['Sites.Site.CountrySubDivision']][['@code']]
#    data2$site_subdivision_name <- data2[['Sites.Site.CountrySubDivision']][['$']]
#    data2[['Sites.Site.CountrySubDivision']] <- NULL
# }
return(data2)
}
}
#Parse Geographic Data Column: Extract limited information
json_to_dataframe_geodata <- function(s) {
l <- jsonlite::fromJSON(s)
assert(class(l) == "list")
if(length(l) == 1) data <- l[[1]]
else data <- l
if(is.null(data[['@country']])) data[['@country']] <- NA
data <- data[['@country']] %>% as.data.frame
names(data) <- 'country'
return(data)
}
#########################################
## Call functions to parse JSON below  ##
#########################################
## Read in data
options(stringsAsFactors = FALSE)
#in.data <- read_csv('/Users/BBerger/Dropbox/Files_ClinTrials_Data/trials.csv')
in.data <- read_csv('../Files_ClinTrials_Data/trials.csv')
nih_activity_codes <- read_csv('data/nih_activity_codes.csv')
## Subset to test functions
set.seed(101)
sample_index <- sample(nrow(in.data), 10000)
trials <-
in.data %>%
#slice(sample_index) %>%
rename(trial_id = id) %>%
arrange(trial_id)
## Parse json columns as tibbles (data_frames)
collaborators_long <-
trials %>%
my_expand(trial_id, CompaniesCollaborator) %>%
rename(collaborator_company_id = `@id`, collaborator_company_name = `$`
)
sponsors_long <-
trials %>%
my_expand(trial_id, CompaniesSponsor) %>%
rename(sponsor_company_id = `@id`, sponsor_company_name = `$`
)
indications_long <-
trials %>%
my_expand(trial_id, Indications) %>%
rename(indication_id = `@id`, indication_name = `$`
)
biomarkers_long <-
trials %>%
my_expand(trial_id, BiomarkerNames) %>%
rename(biomarker_id = `@id`,
biomarker_type = `@type`,
biomarker_name = `$`
)
identifiers_long <-
trials %>%
my_expand(trial_id, Identifiers) %>%
rename(trial_identifier_type = `@type`,
trial_identifier = `$`
)
nih_long <-
identifiers_long %>%
mutate(trial_id_first3 = substring(trimws(trial_identifier), 1, 3)) %>%
mutate(nih_yes = is.element(el = trial_id_first3, set = nih_activity_codes$nih_activity_code)) %>%
select(trial_id, nih_yes) %>%
group_by(trial_id) %>%
summarize(nih_yes = any(nih_yes)
)
date_ends_long <-
trials %>%
my_expand(trial_id, DateEnd) %>%
rename(date_end_type = `@type`,
date_end = `$`
)
trial_design_long <-
trials %>%
my_expand(trial_id, TermsDesign) %>%
rename(trial_design = `~TermsDesign`
)
trial_endpoints_long <-
trials %>%
my_expand(trial_id, TermsEndpoint) %>%
rename(trial_endpoint = `~TermsEndpoint`
)
trial_recruitment_long <-
trials %>%
my_expand(trial_id, RecruitmentStatus) %>%
rename(recruitment_status = `$`) %>%
select(-`@id`)
#note: us_trial is true when the US is listed as a trial site, and false when it is not AND another country IS
#trials in which no site is listed with location in the trials data do NOT appear in us_trials_long
us_trials_long <-
trials %>%
#slice(166378) %>%
my_expand(trial_id, SitesByCountries) %>%
mutate(us_trial = (country == 'US')) %>%
ungroup %>% group_by(trial_id) %>%
summarize(us_trial = any(us_trial))
save.image(file = 'data/long_data.RData')
View(assert)
###############################################################################
## 02_reshape_and_merge.R ; Author: Ben Berger;                              ##
##                                                                           ##
## Takes parsed data in the long format produced by "01_parse_json.R",       ##
## and reshapes them in the wide format with each row representing a unique  ##
## trial                                                                     ##
###############################################################################
library(tidyr)
library(haven)
#To reshape trial data long to wide
my_reshape <- function(df) {
df %>%
group_by(trial_id) %>%
mutate(i = 1:n()) %>%
mutate(i = as.character(sprintf("%03d", i))) %>%
ungroup %>%
select(trial_id, everything()) %>%
gather(key, value, -c(i, trial_id)) %>%
unite(key_i, c(key, i)) %>%
spread(key_i, value)
}
#Load data from 01_parse_json
load('../data/long_data.RData')
#Initialize a tibble with only non-json columns
data_wide <-
trials %>%
select(trial_id,
date_start = DateStart,
patient_count_enrollment = PatientCountEnrollment,
phase = Phase)
#Reshape intermediary dataframes wide and right join by trial_id
for(longdata in ls(pattern = '*_long')){
longdata <- get(longdata)
data_wide <- longdata %>% my_reshape %>% right_join(data_wide)
}
#Select for column order; Arrange to sort by trial_id
data_wide <-
data_wide %>%
mutate(phase_1 = grepl('Phase 1', phase),
phase_2 = grepl('Phase 2', phase),
phase_3 = grepl('Phase 3', phase),
phase_4 = grepl('Phase 4', phase),
)
#Replace phase_N columns with NA if phase is not specified
#'Phase Not Applicable' returns phase_N = 0 for all trial phases N
data_wide[data_wide$phase == 'Phase not specified',grep('phase_', colnames(data_wide))] <- NA
data <-
data_wide %>%
select(
trial_id,
date_start = date_start,
date_end = date_end_001,
date_end_type = date_end_type_001,
biomarker_status = (!is.na(biomarker_id_001)),
starts_with('phase'),
us_trial = us_trial_001,
nih_funding = nih_yes_001,
patient_count_enrollment,
recruitment_status = recruitment_status_001,
starts_with('indication'),
starts_with('sponsor_company'),
starts_with('collaborator_company'),
starts_with('biomarker_id'),
starts_with('biomarker_name'),
starts_with('biomarker_type'),
starts_with('trial_endpoint'),
starts_with('trial_design'),
everything()
) %>%
mutate(date_start = as.Date(date_start),
date_end = as.Date(date_end)) %>%
mutate_if(is.logical, as.numeric) %>%
arrange(trial_id)
data_wide %>% select(starts_with('biomarker'))
data <-
data_wide %>%
select(
trial_id,
date_start = date_start,
date_end = date_end_001,
date_end_type = date_end_type_001,
biomarker_status = !is.na(biomarker_id_001),
starts_with('phase'),
us_trial = us_trial_001,
nih_funding = nih_yes_001,
patient_count_enrollment,
recruitment_status = recruitment_status_001,
starts_with('indication'),
starts_with('sponsor_company'),
starts_with('collaborator_company'),
starts_with('biomarker_id'),
starts_with('biomarker_name'),
starts_with('biomarker_type'),
starts_with('trial_endpoint'),
starts_with('trial_design'),
everything()
) %>%
mutate(date_start = as.Date(date_start),
date_end = as.Date(date_end)) %>%
mutate_if(is.logical, as.numeric) %>%
arrange(trial_id)
data_wide <-
data_wide %>%
mutate(phase_1 = grepl('Phase 1', phase),
phase_2 = grepl('Phase 2', phase),
phase_3 = grepl('Phase 3', phase),
phase_4 = grepl('Phase 4', phase),
biomarker_status = !is.na(biomarker_id_001)
)
data_wide[data_wide$phase == 'Phase not specified',grep('phase_', colnames(data_wide))] <- NA
data <-
data_wide %>%
select(
trial_id,
date_start = date_start,
date_end = date_end_001,
date_end_type = date_end_type_001,
starts_with('phase'),
us_trial = us_trial_001,
nih_funding = nih_yes_001,
patient_count_enrollment,
recruitment_status = recruitment_status_001,
starts_with('indication'),
starts_with('sponsor_company'),
starts_with('collaborator_company'),
starts_with('biomarker_id'),
starts_with('biomarker_name'),
starts_with('biomarker_type'),
starts_with('trial_endpoint'),
starts_with('trial_design'),
everything()
) %>%
mutate(date_start = as.Date(date_start),
date_end = as.Date(date_end)) %>%
mutate_if(is.logical, as.numeric) %>%
arrange(trial_id)
data <-
data_wide %>%
select(
trial_id,
date_start = date_start,
date_end = date_end_001,
date_end_type = date_end_type_001,
starts_with('phase'),
biomarker_status,
us_trial = us_trial_001,
nih_funding = nih_yes_001,
patient_count_enrollment,
recruitment_status = recruitment_status_001,
starts_with('indication'),
starts_with('sponsor_company'),
starts_with('collaborator_company'),
starts_with('biomarker_id'),
starts_with('biomarker_name'),
starts_with('biomarker_type'),
starts_with('trial_endpoint'),
starts_with('trial_design'),
everything()
) %>%
mutate(date_start = as.Date(date_start),
date_end = as.Date(date_end)) %>%
mutate_if(is.logical, as.numeric) %>%
arrange(trial_id)
names(data)
