rank[max_index]
}
mode <- function(x){
sort(table(x))[1]
}
replicate(1000, f(popularity, max_index)) %>% mode
rm(list = ls())
library(magrittr)
popularity <- runif(100, 0, 1)
max_index <- which(popularity == max(popularity))
f <- function(popularity, max_index){
x <- rnorm(100, popularity, 1)
rank <- rank(-x)
rank[max_index]
}
mode <- function(x){
sort(table(x))[1]
}
replicate(1000, f(popularity, max_index)) %>% mode
rm(list = ls())
library(magrittr)
popularity <- runif(100, 0, 1)
max_index <- which(popularity == max(popularity))
f <- function(popularity, max_index){
x <- rnorm(100, popularity, 1)
rank <- rank(-x)
rank[max_index]
}
mode <- function(x){
sort(table(x))[1]
}
replicate(1000, f(popularity, max_index)) %>% mode
rm(list = ls())
library(magrittr)
popularity <- runif(100, 0, 1)
max_index <- which(popularity == max(popularity))
f <- function(popularity, max_index){
x <- rnorm(100, popularity, 1)
rank <- rank(-x)
rank[max_index]
}
mode <- function(x){
sort(table(x))[1]
}
replicate(1000, f(popularity, max_index)) %>% mode
rm(list = ls())
library(magrittr)
popularity <- runif(100, 0, 1)
max_index <- which(popularity == max(popularity))
f <- function(popularity, max_index){
x <- rnorm(100, popularity, 1)
rank <- rank(-x)
rank[max_index]
}
mode <- function(x){
sort(table(x))[1]
}
replicate(1000, f(popularity, max_index)) %>% mode
rm(list = ls())
library(magrittr)
popularity <- runif(100, 0, 1)
max_index <- which(popularity == max(popularity))
f <- function(popularity, max_index){
x <- rnorm(100, popularity, 1)
rank <- rank(-x)
rank[max_index]
}
mode <- function(x){
sort(table(x))[1]
}
replicate(1000, f(popularity, max_index)) %>% mode
rm(list = ls())
library(magrittr)
popularity <- runif(100, 0, 1)
max_index <- which(popularity == max(popularity))
f <- function(popularity, max_index){
x <- rnorm(100, popularity, 1)
rank <- rank(-x)
rank[max_index]
}
mode <- function(x){
sort(table(x))[1]
}
replicate(1000, f(popularity, max_index)) %>% mode
replicate(1000, f(popularity, max_index)) %>% table %>% sort
ls()
getwd()
setwd("~/Dropbox/clinical_trials")
biomarker_uses <- read_csv('data/July 31 Update/biomarker_uses.csv')
#########################################################################
## parse_json.R ; Author: Ben Berger;                                  ##
## Modified from script by Andrew Marder:                              ##
## Original notes from AM:                                             ##
## I've written a function called `my_expand` to make working with the ##
## trials data a little bit easier. The `get_name`, `assert`, and      ##
## `json_to_dataframe` functions are helper functions that I used to   ##
## write the `my_expand` function.                                     ##
#########################################################################
library(dplyr)
library(rlang)
library(readr)
assert <- stopifnot
get_name <- function(x) as.character(UQE(x))
## Apply json_to_dataframe to each cell of a column
my_expand <- function(df, id, var) {
id <- enquo(id)
var <- enquo(var)
varname <- deparse(substitute(var))
f <- function(row) {
assert(class(row) == "list")
if(varname == '~SitesByCountries') data <- json_to_dataframe_geodata(row[[get_name(var)]])
else data <- json_to_dataframe(row[[get_name(var)]], varname)
data[[get_name(id)]] <- row[[get_name(id)]]
return(data)
}
df %>%
select(!!id, !!var) %>%
filter(!is.na(!!var)) %>%
rowwise() %>%
do(f(.)) %>%
ungroup
}
## Parse a JSON cell as a tibble (data_frame)
json_to_dataframe <- function(s, varname) {
l <- jsonlite::fromJSON(s)
assert(class(l) == "list")
if(length(l) == 1) data <- l[[1]]
else data <- l
if (class(data) == "data.frame") {
return(data)
}
else {
data2 <- data.frame(data)
if(length(names(data)) == 0) names(data2) <- varname
else names(data2) <- names(data)
# next few lines are some test code for getting country data
# if(varname == '~SitesByCountries'){
#    data2$site_subdivision_code <- data2[['Sites.Site.CountrySubDivision']][['@code']]
#    data2$site_subdivision_name <- data2[['Sites.Site.CountrySubDivision']][['$']]
#    data2[['Sites.Site.CountrySubDivision']] <- NULL
# }
return(data2)
}
}
#Parse Geographic Data Column: Extract limited information
json_to_dataframe_geodata <- function(s) {
l <- jsonlite::fromJSON(s)
assert(class(l) == "list")
if(length(l) == 1) data <- l[[1]]
else data <- l
if(is.null(data[['@country']])) data[['@country']] <- NA
data <- data[['@country']] %>% as.data.frame
names(data) <- 'country'
return(data)
}
options(stringsAsFactors = FALSE)
reshape_types <- function(df) {
df %>%
group_by(biomarker_id) %>%
mutate(i = 1:n()) %>%
mutate(i = as.character(sprintf("%03d", i))) %>%
ungroup %>%
select(biomarker_id, everything()) %>%
gather(key, value, -c(i, biomarker_id)) %>%
unite(key_i, c(key, i)) %>%
spread(key_i, value)
}
biomarker_uses <- read_csv('data/July 31 Update/biomarker_uses.csv')
biomarker_uses$role
biomarker_uses$role %>% table
View(biomarker_uses)
biomarker_uses %>% filter(role == 'All')
#########################################################################
## parse_json.R ; Author: Ben Berger;                                  ##
## Modified from script by Andrew Marder:                              ##
## Original notes from AM:                                             ##
## I've written a function called `my_expand` to make working with the ##
## trials data a little bit easier. The `get_name`, `assert`, and      ##
## `json_to_dataframe` functions are helper functions that I used to   ##
## write the `my_expand` function.                                     ##
#########################################################################
library(dplyr)
library(rlang)
library(readr)
assert <- stopifnot
get_name <- function(x) as.character(UQE(x))
## Apply json_to_dataframe to each cell of a column
my_expand <- function(df, id, var) {
id <- enquo(id)
var <- enquo(var)
varname <- deparse(substitute(var))
f <- function(row) {
assert(class(row) == "list")
if(varname == '~SitesByCountries') data <- json_to_dataframe_geodata(row[[get_name(var)]])
else data <- json_to_dataframe(row[[get_name(var)]], varname)
data[[get_name(id)]] <- row[[get_name(id)]]
return(data)
}
df %>%
select(!!id, !!var) %>%
filter(!is.na(!!var)) %>%
rowwise() %>%
do(f(.)) %>%
ungroup
}
## Parse a JSON cell as a tibble (data_frame)
json_to_dataframe <- function(s, varname) {
l <- jsonlite::fromJSON(s)
assert(class(l) == "list")
if(length(l) == 1) data <- l[[1]]
else data <- l
if (class(data) == "data.frame") {
return(data)
}
else {
data2 <- data.frame(data)
if(length(names(data)) == 0) names(data2) <- varname
else names(data2) <- names(data)
# next few lines are some test code for getting country data
# if(varname == '~SitesByCountries'){
#    data2$site_subdivision_code <- data2[['Sites.Site.CountrySubDivision']][['@code']]
#    data2$site_subdivision_name <- data2[['Sites.Site.CountrySubDivision']][['$']]
#    data2[['Sites.Site.CountrySubDivision']] <- NULL
# }
return(data2)
}
}
#Parse Geographic Data Column: Extract limited information
json_to_dataframe_geodata <- function(s) {
l <- jsonlite::fromJSON(s)
assert(class(l) == "list")
if(length(l) == 1) data <- l[[1]]
else data <- l
if(is.null(data[['@country']])) data[['@country']] <- NA
data <- data[['@country']] %>% as.data.frame
names(data) <- 'country'
return(data)
}
#########################################
## Call functions to parse JSON below  ##
#########################################
## Read in data
options(stringsAsFactors = FALSE)
# Uncomment line below to modify variable construction without building from scratch
load('data/long_data.RData')
################################
#Load Trial biomarkers
trial_biomarkers <-
trials %>%
my_expand(trial_id, BiomarkerNames) %>%
rename(biomarker_id = `@id`,
biomarker_role = `@type`,
biomarker_name = `$`
) %>%
mutate(disease_marker = grepl('disease', tolower(biomarker_role)),
toxic_marker = grepl('toxic', tolower(biomarker_role)),
therapeutic_marker = grepl('therapeutic', tolower(biomarker_role)),
not_determined_marker = grepl('not determined', tolower(biomarker_role)),
not_determined_marker = not_determined_marker | (!disease_marker & !toxic_marker & !therapeutic_marker)
)
#Load detailed biomarker role data
biomarker_uses <- read_csv('data/July 31 Update/biomarker_uses.csv')
roles <-
biomarker_uses %>%
select(biomarker_use_id,
biomarker_id,
ci_indication_id,
biomarker,
detailed_role = role
) %>%
group_by(biomarker_id, ci_indication_id) %>%
summarize(diagnosis_drole =                any(detailed_role == 'Diagnosis'),
diff_diagnosis_drole =   any(detailed_role == 'Differential Diagnosis'),
predict_resistance_drole =   any(detailed_role == 'Predicting Drug Resistance'),
predict_efficacy_drole =   any(detailed_role == 'Predicting Treatment Efficacy'),
predict_toxicity_drole =   any(detailed_role == 'Predicting Treatment Toxicity'),
screening_detail_drole =   any(detailed_role == 'Screening'),
selection_for_therapy_drole =   any(detailed_role == 'Selection for Therapy'),
all_drole = any(detailed_role = 'All'),
disease_profiling_drole = any(detailed_role = 'Disease Profiling'),
monitor_progression_drole = any(detailed_role = 'Monitoring Disease Progression'),
monitor_efficacy = any(detailed_role = 'Monitoring Treatment Efficacy'),
monitor_toxicity_drole = any(detailed_role = 'Monitoring Treatment Toxicity'),
monitor_progression_drole = any(detailed_role = 'Monitoring Disease Progression'),
not_determined_drole = any(detailed_role = 'Not Determined'),
prognosis_drole = any(detailed_role = 'Prognosis'),
prognosis_riskstrat_drole = any(detailed_role = 'Prognosis - Risk Stratification'),
risk_factor_drole = any(detailed_role = 'Risk Factor'),
staging_drole = any(detailed_role = 'Staging'),
toxicity_profiling_drole = any(detailed_role = 'Toxicity Profiling')
) %>%
arrange(biomarker_id, ci_indication_id)
#Join biomarkers and indications, then match detailed role data to both
biomarkers_indications <-
trial_biomarkers %>%
left_join(indications_long, by = 'trial_id') %>%
mutate(indication_id = as.numeric(indication_id),
biomarker_id = as.numeric(biomarker_id)) %>%
left_join(roles, by = c('biomarker_id', 'indication_id' = 'ci_indication_id')) %>%
select(trial_id, indication_id, biomarker_id,  everything() )
#Match biomarker type data
biomarker_types <- read_csv('data/July 31 Update/biomarkers.csv')
types <-
biomarker_types %>%
my_expand(id, BiomarkerTypes) %>%
rename(biomarker_id = id,
biomarker_type = `~BiomarkerTypes`) %>%
arrange(biomarker_id)
#To reshape biomarker types long to wide
reshape_types <- function(df) {
df %>%
group_by(biomarker_id) %>%
mutate(i = 1:n()) %>%
mutate(i = as.character(sprintf("%03d", i))) %>%
ungroup %>%
select(biomarker_id, everything()) %>%
gather(key, value, -c(i, biomarker_id)) %>%
unite(key_i, c(key, i)) %>%
spread(key_i, value)
}
types <- reshape_types(types)
biomarker_data <-
biomarkers_indications %>%
left_join(types, by = 'biomarker_id')
library(tidyr)
reshape_types <- function(df) {
df %>%
group_by(biomarker_id) %>%
mutate(i = 1:n()) %>%
mutate(i = as.character(sprintf("%03d", i))) %>%
ungroup %>%
select(biomarker_id, everything()) %>%
gather(key, value, -c(i, biomarker_id)) %>%
unite(key_i, c(key, i)) %>%
spread(key_i, value)
}
types <- reshape_types(types)
biomarker_data <-
biomarkers_indications %>%
left_join(types, by = 'biomarker_id')
save(file = 'data/biomarker_data_08-13-17.RData', biomarker_data)
write_csv(biomarker_data, 'data/biomarker_data_08-13-17.csv')
write_dta(biomarker_data, 'data/biomarker_data_08-13-17.dta', version = 12)
library(haven)
write_dta(biomarker_data, 'data/biomarker_data_08-13-17.dta', version = 12)
View(biomarker_data)
roles %>% View
nrow(biomarker_uses)
roles <-
biomarker_uses %>%
slice(1:10000) %>%
select(biomarker_use_id,
biomarker_id,
ci_indication_id,
biomarker,
detailed_role = role
) %>%
group_by(biomarker_id, ci_indication_id) %>%
summarize(diagnosis_drole =                any(detailed_role == 'Diagnosis'),
diff_diagnosis_drole =   any(detailed_role == 'Differential Diagnosis'),
predict_resistance_drole =   any(detailed_role == 'Predicting Drug Resistance'),
predict_efficacy_drole =   any(detailed_role == 'Predicting Treatment Efficacy'),
predict_toxicity_drole =   any(detailed_role == 'Predicting Treatment Toxicity'),
screening_detail_drole =   any(detailed_role == 'Screening'),
selection_for_therapy_drole =   any(detailed_role == 'Selection for Therapy'),
all_drole = any(detailed_role = 'All'),
disease_profiling_drole = any(detailed_role = 'Disease Profiling'),
monitor_progression_drole = any(detailed_role = 'Monitoring Disease Progression'),
monitor_efficacy = any(detailed_role = 'Monitoring Treatment Efficacy'),
monitor_toxicity_drole = any(detailed_role = 'Monitoring Treatment Toxicity'),
monitor_progression_drole = any(detailed_role = 'Monitoring Disease Progression'),
not_determined_drole = any(detailed_role = 'Not Determined'),
prognosis_drole = any(detailed_role = 'Prognosis'),
prognosis_riskstrat_drole = any(detailed_role = 'Prognosis - Risk Stratification'),
risk_factor_drole = any(detailed_role = 'Risk Factor'),
staging_drole = any(detailed_role = 'Staging'),
toxicity_profiling_drole = any(detailed_role = 'Toxicity Profiling')
) %>%
arrange(biomarker_id, ci_indication_id)
warnings()
roles %>% View
roles <-
biomarker_uses %>%
slice(1:10000) %>%
select(biomarker_use_id,
biomarker_id,
ci_indication_id,
biomarker,
detailed_role = role
) %>%
group_by(biomarker_id, ci_indication_id) %>%
summarize(diagnosis_drole =                any(detailed_role == 'Diagnosis'),
diff_diagnosis_drole =   any(detailed_role == 'Differential Diagnosis'),
predict_resistance_drole =   any(detailed_role == 'Predicting Drug Resistance'),
predict_efficacy_drole =   any(detailed_role == 'Predicting Treatment Efficacy'),
predict_toxicity_drole =   any(detailed_role == 'Predicting Treatment Toxicity'),
screening_detail_drole =   any(detailed_role == 'Screening'),
selection_for_therapy_drole =   any(detailed_role == 'Selection for Therapy'),
all_drole = any(detailed_role = 'All'),
disease_profiling_drole = any(detailed_role = 'Disease Profiling'),
monitor_progression_drole = any(detailed_role = 'Monitoring Disease Progression'),
monitor_efficacy = any(detailed_role = 'Monitoring Treatment Efficacy'),
monitor_toxicity_drole = any(detailed_role = 'Monitoring Treatment Toxicity'),
monitor_progression_drole = any(detailed_role = 'Monitoring Disease Progression'),
not_determined_drole = any(detailed_role = 'Not Determined'),
prognosis_drole = any(detailed_role = 'Prognosis'),
prognosis_riskstrat_drole = any(detailed_role = 'Prognosis - Risk Stratification'),
risk_factor_drole = any(detailed_role = 'Risk Factor'),
staging_drole = any(detailed_role = 'Staging'),
toxicity_profiling_drole = any(detailed_role = 'Toxicity Profiling')
) %>%
arrange(biomarker_id, ci_indication_id)
roles %>% View
roles <-
biomarker_uses %>%
slice(1:10000) %>%
select(biomarker_use_id,
biomarker_id,
ci_indication_id,
biomarker,
detailed_role = role
) %>%
group_by(biomarker_id, ci_indication_id) %>%
summarize(diagnosis_drole =                any(detailed_role == 'Diagnosis'),
diff_diagnosis_drole =   any(detailed_role == 'Differential Diagnosis'),
predict_resistance_drole =   any(detailed_role == 'Predicting Drug Resistance'),
predict_efficacy_drole =   any(detailed_role == 'Predicting Treatment Efficacy'),
predict_toxicity_drole =   any(detailed_role == 'Predicting Treatment Toxicity'),
screening_detail_drole =   any(detailed_role == 'Screening'),
selection_for_therapy_drole =   any(detailed_role == 'Selection for Therapy'),
all_drole = any(detailed_role == 'All'),
disease_profiling_drole = any(detailed_role == 'Disease Profiling'),
monitor_progression_drole = any(detailed_role == 'Monitoring Disease Progression'),
monitor_efficacy_drole = any(detailed_role == 'Monitoring Treatment Efficacy'),
monitor_toxicity_drole = any(detailed_role == 'Monitoring Treatment Toxicity'),
monitor_progression_drole = any(detailed_role == 'Monitoring Disease Progression'),
not_determined_drole = any(detailed_role == 'Not Determined'),
prognosis_drole = any(detailed_role == 'Prognosis'),
prognosis_riskstrat_drole = any(detailed_role == 'Prognosis - Risk Stratification'),
risk_factor_drole = any(detailed_role == 'Risk Factor'),
staging_drole = any(detailed_role == 'Staging'),
toxicity_profiling_drole = any(detailed_role == 'Toxicity Profiling')
) %>%
arrange(biomarker_id, ci_indication_id)
roles %>% View
biomarker_uses <- read_csv('data/July 31 Update/biomarker_uses.csv')
roles <-
biomarker_uses %>%
select(biomarker_use_id,
biomarker_id,
ci_indication_id,
biomarker,
detailed_role = role
) %>%
group_by(biomarker_id, ci_indication_id) %>%
summarize(diagnosis_drole =                any(detailed_role == 'Diagnosis'),
diff_diagnosis_drole =   any(detailed_role == 'Differential Diagnosis'),
predict_resistance_drole =   any(detailed_role == 'Predicting Drug Resistance'),
predict_efficacy_drole =   any(detailed_role == 'Predicting Treatment Efficacy'),
predict_toxicity_drole =   any(detailed_role == 'Predicting Treatment Toxicity'),
screening_detail_drole =   any(detailed_role == 'Screening'),
selection_for_therapy_drole =   any(detailed_role == 'Selection for Therapy'),
all_drole = any(detailed_role == 'All'),
disease_profiling_drole = any(detailed_role == 'Disease Profiling'),
monitor_progression_drole = any(detailed_role == 'Monitoring Disease Progression'),
monitor_efficacy_drole = any(detailed_role == 'Monitoring Treatment Efficacy'),
monitor_toxicity_drole = any(detailed_role == 'Monitoring Treatment Toxicity'),
monitor_progression_drole = any(detailed_role == 'Monitoring Disease Progression'),
not_determined_drole = any(detailed_role == 'Not Determined'),
prognosis_drole = any(detailed_role == 'Prognosis'),
prognosis_riskstrat_drole = any(detailed_role == 'Prognosis - Risk Stratification'),
risk_factor_drole = any(detailed_role == 'Risk Factor'),
staging_drole = any(detailed_role == 'Staging'),
toxicity_profiling_drole = any(detailed_role == 'Toxicity Profiling')
) %>%
arrange(biomarker_id, ci_indication_id)
#Join biomarkers and indications, then match detailed role data to both
biomarkers_indications <-
trial_biomarkers %>%
left_join(indications_long, by = 'trial_id') %>%
mutate(indication_id = as.numeric(indication_id),
biomarker_id = as.numeric(biomarker_id)) %>%
left_join(roles, by = c('biomarker_id', 'indication_id' = 'ci_indication_id')) %>%
select(trial_id, indication_id, biomarker_id,  everything() )
#Match biomarker type data
biomarker_types <- read_csv('data/July 31 Update/biomarkers.csv')
types <-
biomarker_types %>%
my_expand(id, BiomarkerTypes) %>%
rename(biomarker_id = id,
biomarker_type = `~BiomarkerTypes`) %>%
arrange(biomarker_id)
#To reshape biomarker types long to wide
reshape_types <- function(df) {
df %>%
group_by(biomarker_id) %>%
mutate(i = 1:n()) %>%
mutate(i = as.character(sprintf("%03d", i))) %>%
ungroup %>%
select(biomarker_id, everything()) %>%
gather(key, value, -c(i, biomarker_id)) %>%
unite(key_i, c(key, i)) %>%
spread(key_i, value)
}
types <- reshape_types(types)
biomarker_data <-
biomarkers_indications %>%
left_join(types, by = 'biomarker_id')
save(file = 'data/biomarker_data_08-13-17.RData', biomarker_data)
write_csv(biomarker_data, 'data/biomarker_data_08-13-17.csv')
write_dta(biomarker_data, 'data/biomarker_data_08-13-17.dta', version = 12)
View(biomarker_data)
